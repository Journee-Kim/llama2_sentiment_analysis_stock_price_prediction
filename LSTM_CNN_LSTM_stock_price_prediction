{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9038873,"sourceType":"datasetVersion","datasetId":5448980}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import random\nfrom datetime import datetime\nimport numpy as np\nimport pandas as pd\nfrom numpy.random import seed\nfrom pandas.tseries.offsets import BDay\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Visualization Imports\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pylab import rcParams\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nimport scipy.stats as stats\n\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Conv1D,Conv2D,MaxPooling2D,MaxPooling1D,Flatten\nfrom keras.layers import Dense, Dropout\n# from tensorflow.compat.v1.keras.layers import CuDNNLSTM,Bidirectional\nseed=42\n\n# Neural Network Imports\nimport tensorflow as tf\nfrom tensorflow.keras import models\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\n# Mute sklearn warnings\nfrom warnings import simplefilter\nsimplefilter(action='ignore', category=FutureWarning)\nsimplefilter(action='ignore', category=DeprecationWarning)\n\n# Setting seed\nSEED = 0\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)\n\n# Visualization Configurations\nsns.set_style('whitegrid')\nplt.style.use('fivethirtyeight')\n%matplotlib inline\npio.templates.default = \"plotly_dark\"\n%config InlineBackend.figure_format = 'retina'","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:20:03.186784Z","iopub.execute_input":"2024-07-30T15:20:03.187215Z","iopub.status.idle":"2024-07-30T15:20:24.503652Z","shell.execute_reply.started":"2024-07-30T15:20:03.187182Z","shell.execute_reply":"2024-07-30T15:20:24.502502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!python --version","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:50:32.994184Z","iopub.execute_input":"2024-07-31T03:50:32.995206Z","iopub.status.idle":"2024-07-31T03:50:34.073079Z","shell.execute_reply.started":"2024-07-31T03:50:32.995165Z","shell.execute_reply":"2024-07-31T03:50:34.071774Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Python 3.10.13\n","output_type":"stream"}]},{"cell_type":"code","source":"def show(data: pd.DataFrame):\n    df = data.copy()\n    df = df.style.format(precision=3)\n    df = df.background_gradient(cmap='Reds', axis=0)\n    display(df)\n\ndef highlight_half(data: pd.DataFrame, axis=1, precision=3):\n    \n    s = data.shape[1] if axis else data.shape[0]\n    data_style = data.style.format(precision=precision)\n\n    def apply_style(val):\n        style1 = 'background-color: red; color: white'\n        style2 = 'background-color: blue; color: white'\n        return [style1 if x < s//2 else style2 for x in range(s)]\n\n    display(data_style.apply(apply_style, axis=axis))","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:05.622882Z","iopub.execute_input":"2024-07-30T15:22:05.623715Z","iopub.status.idle":"2024-07-30T15:22:05.632700Z","shell.execute_reply.started":"2024-07-30T15:22:05.623676Z","shell.execute_reply":"2024-07-30T15:22:05.631258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def pct_chart(df:pd.DataFrame,symbol):\n    df = df\n    # Creating subplot\n    fig = make_subplots(rows=2, cols=2, column_widths=[0.7, 0.3],\n                        vertical_spacing=0.1, horizontal_spacing=0.05,\n                        subplot_titles=(f\"{symbol} - Percent Change over Time\", f\"{symbol} Percent Change - Histogram\",\n                                        f\"{symbol} - Stock Volume over Time\", f\"{symbol} Stock Volume - Histogram\",))\n    # Percent Change Plot\n    percent_change = df['close'].pct_change() * 100\n    fig.add_trace(go.Scatter(x=df.index, y=percent_change, name='Percent Change', marker_color='darkorchid'), row=1, col=1)\n    fig.add_trace(go.Histogram(x=percent_change, nbinsx=50, name='Percent Change', marker_color='darkorchid'),  row=1, col=2)\n    fig.add_annotation(text=f\"Mean: {percent_change.mean():.2f}%<br>Std Dev: {percent_change.std():.2f}%\",\n                       xref='x2', yref='y2', x=percent_change.mean(), y=5, showarrow=True)\n    # Volume Plot\n    fig.add_trace(go.Scatter(x=df.index, y=df['volume'], name='Volume', marker_color='darkcyan'), row=2, col=1)\n    fig.add_trace(go.Histogram(x=df['volume'], nbinsx=50, name='Daily Volume', marker_color='darkcyan'),  row=2, col=2)\n    fig.add_annotation(text=f\"Mean: {df['volume'].mean():.2f}<br>Std Dev: {df['volume'].std():.2f}\",\n                       xref='x4', yref='y4', x=df['volume'].mean(), y=5, showarrow=True)\n\n    fig.update_layout(height=700, width=1100)\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:14.855267Z","iopub.execute_input":"2024-07-30T15:22:14.855697Z","iopub.status.idle":"2024-07-30T15:22:14.869234Z","shell.execute_reply.started":"2024-07-30T15:22:14.855667Z","shell.execute_reply":"2024-07-30T15:22:14.867886Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_training_history(history, plot_title='Training Performance', plot_legends=None, color0=0):\n    \"\"\"\n    Plots the training history of a model using Plotly.\n\n    Args:\n        history (dict): A dictionary containing the training history metrics.\n        plot_title (str): Title of the plot.\n        plot_legends (list): List of legends for the plot. If None, it uses the keys from the history dictionary.\n\n    Returns:\n        None: Displays the plot.\n    \"\"\"\n    # Extracting metrics from the history object\n    epochs = np.arange(1, len(next(iter(history.values()))) + 1)\n    colors = ['blue', 'gold', 'violet', 'lime', 'blue', 'pink', 'yellow']\n    data = []\n\n    # If no legends are provided, use keys from the history\n    if not plot_legends:\n        plot_legends = list(history.keys())\n\n    # Prepare data for each metric in the history\n    for i, (key, legend) in enumerate(zip(history.keys(), plot_legends)):\n        color_index = i % len(colors) + color0\n        data.append(go.Scatter(x=epochs, y=history[key], mode='lines+markers', name=legend, line=dict(color=colors[color_index])))\n\n    # Add error for minimum epoch value\n    min_epoch = np.argmin(history['val_loss']) + 1 \n    loss_str = f\"Train Loss: {history['loss'][min_epoch-1]:.3e}<br>Validation Loss: {history['val_loss'][min_epoch - 1]:.3e}\"\n\n    # Creating the layout\n    layout = go.Layout(title=plot_title, xaxis=dict(title='Epochs'), yaxis=dict(title='Value'), width=1100, height=600)\n    fig = go.Figure(data=data, layout=layout)\n\n    # Annotate the minimum loss with an arrow\n    fig.add_annotation(\n        go.layout.Annotation(\n            x=min_epoch,\n            y=history['loss'][min_epoch - 1],\n            xref=\"x\",\n            yref=\"y\",\n            text=loss_str,\n            showarrow=True,\n            arrowhead=7,\n            arrowcolor='green',\n            arrowsize=2,\n            bordercolor='green',\n            borderwidth=2,\n            ax=0,\n            ay=-40\n        )\n    )\n    fig.show()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-07-30T15:24:25.406587Z","iopub.execute_input":"2024-07-30T15:24:25.407008Z","iopub.status.idle":"2024-07-30T15:24:25.421472Z","shell.execute_reply.started":"2024-07-30T15:24:25.406979Z","shell.execute_reply":"2024-07-30T15:24:25.419970Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error,mean_absolute_error,mean_absolute_percentage_error\nfrom math import sqrt\n\ndef plot_predictions_with_dates (model,type,news,dates,y_actual_lstm,y_pred_lstm):\n    predicted_features=['close']\n    for i,predicted_feature in enumerate(predicted_features):\n        plt.figure(figsize=(15,6))\n        if news :\n            plt.title(f'{model} {type} prediction of {predicted_feature} feature After adding news sentiment analysis')\n        else:\n            plt.title(f'{model} {type} prediction of {predicted_feature} feature without news sentiment analysis')\n        sns.lineplot(x=dates, y=y_actual_lstm[:,i],label='Actual')\n        sns.lineplot(x=dates, y=y_pred_lstm[:, i], label='Predicted')\n        plt.show()\n        MAE = mean_absolute_error(y_actual_lstm[:,i], y_pred_lstm[:, i])\n        RMSE=np.sqrt(mean_squared_error(y_actual_lstm[:,i], y_pred_lstm[:, i]))\n        MAPE = np.mean(np.abs((y_actual_lstm[:,i] - y_pred_lstm[:, i])/y_actual_lstm[:,i]))*100\n        #MAPE=mean_absolute_percentage_error(y_actual_lstm[:,i], y_pred_lstm[:, i])\n        print(f'MAE for {predicted_feature} ={MAE}')\n        print(f'RMSE for {predicted_feature} ={RMSE}')\n        print(f'MAPE for {predicted_feature} ={MAPE}')\n        print(f'MSE for {predicted_feature}={mean_squared_error(y_actual_lstm[:,i], y_pred_lstm[:, i])}')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:23:33.080049Z","iopub.execute_input":"2024-07-30T18:23:33.080575Z","iopub.status.idle":"2024-07-30T18:23:33.095136Z","shell.execute_reply.started":"2024-07-30T18:23:33.080539Z","shell.execute_reply":"2024-07-30T18:23:33.093707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plotly_residual_analysis(df, title_add=''):\n    \"\"\"\n    Perform residual analysis for multiple features in a DataFrame.\n    The DataFrame should contain actual and predicted columns for each feature.\n    \n    Args:\n        df (pd.DataFrame): DataFrame containing actual and predicted columns.\n        title_add (str, optional): Additional title for the subplots.\n    \"\"\"\n    # Number of columns\n    columns = [col for col in df.columns if not col.startswith('pred_')]\n    print(columns)\n    num_features = len(columns)\n\n    # Color per column\n    colors = ['blue', 'green', 'red', 'purple', 'orange', 'yellow']\n\n    # Subplots per columns\n    fig = make_subplots(rows=4, cols=4, vertical_spacing=0.035, horizontal_spacing=0.035,\n                        subplot_titles=(\"Histogram\", \"QQ-Normal Plot\", \"Residuals vs. Predicted Values\", \"Residuals vs Index\"))\n\n    for i, col in enumerate(['close']):\n        actual = df[col]\n        predicted = df[f'pred_{col}']\n#         print(predicted)\n        residuals = actual - predicted\n        mean_residuals = np.mean(residuals)\n        sd_residuals = np.std(residuals)\n        rmse = np.sqrt(np.mean(residuals**2))\n        index = df.index\n\n        # Assign color for each feature\n        color = colors[i % len(colors)]\n\n        # Histogram of residuals\n        fig.add_trace(go.Histogram(x=residuals, nbinsx=30, name=f'{col.title()} Residuals', marker_color=color),\n                      row=i+1, col=1)\n        # Add lines for mean and standard deviation\n        fig.add_vline(x=mean_residuals, line=dict(color='black', width=2), row=i+1, col=1)\n        fig.add_vline(x=mean_residuals + sd_residuals, line=dict(color='grey', width=2, dash='dash'), row=i+1, col=1)\n        fig.add_vline(x=mean_residuals - sd_residuals, line=dict(color='grey', width=2, dash='dash'), row=i+1, col=1)\n        fig.add_annotation(x=mean_residuals, y=5, text=f\"Mean: {mean_residuals:.2f}\", showarrow=True, row=i+1, col=1)\n        fig.add_annotation(x=sd_residuals + mean_residuals, y=5, text=f\"SD: {sd_residuals:.2f}\", showarrow=False, row=i+1, \n                           col=1)\n        \n        # QQ-Normal of residuals\n        qq = stats.probplot(residuals, dist=\"norm\", plot=None)\n        fig.add_trace(go.Scatter(x=qq[0][0], y=qq[1][1] + qq[1][0]*qq[0][0], mode='lines',  showlegend=False), \n                      row=i+1, col=2)\n        fig.add_trace(go.Scatter(x=qq[0][0], y=qq[0][1], mode='markers', marker_color=color, name=f'{col.title()} QQ'), \n                      row=i+1, col=2)\n\n        # Residuals vs. predicted values\n        fig.add_trace(go.Scatter(x=predicted, y=residuals, mode='markers', marker_color=color, \n                                 name=f'{col.title()} Resid Pred'), row=i+1, col=3)\n        fig.add_hline(y=0, line=dict(color='red'), row=i+1, col=3)\n        fig.add_hline(y=2 * rmse, line=dict(color='red', dash='dash'), row=i+1, col=3)\n        fig.add_hline(y=-2 * rmse, line=dict(color='red', dash='dash'), row=i+1, col=3)\n\n        # Residuals vs. index\n        fig.add_trace(go.Scatter(x=index, y=residuals, mode='markers', marker_color=color,\n                                 name=f'{col.title()} Resid Index'), row=i+1, col=4)\n        fig.add_hline(y=0, line=dict(color='red'), row=i+1, col=4)\n        fig.add_hline(y=2 * rmse, line=dict(color='red', dash='dash'), row=i+1, col=4)\n        fig.add_hline(y=-2 * rmse, line=dict(color='red', dash='dash'), row=i+1, col=4)\n\n    # Update layout\n    fig.update_layout(height=250*num_features, width=1400, title_text=\"Residual Analysis \" + title_add)\n    fig.show()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-07-30T15:49:19.629793Z","iopub.execute_input":"2024-07-30T15:49:19.630265Z","iopub.status.idle":"2024-07-30T15:49:19.655907Z","shell.execute_reply.started":"2024-07-30T15:49:19.630232Z","shell.execute_reply":"2024-07-30T15:49:19.654484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# MSFT No shift, window =5, coefficient =0, Final","metadata":{}},{"cell_type":"markdown","source":"### Load Data","metadata":{}},{"cell_type":"code","source":"# load stock data\nmsft = pd.read_csv('../input/msft-and-tesla-stock/msft_20200101_20240628.csv')\ntsla = pd.read_csv('../input/msft-and-tesla-stock/tsla_20200101_20240628.csv')\n# load sentiment data\nmsft_sent = pd.read_csv('../input/msft-and-tesla-stock/msft_with_sentiment_label.csv',encoding='unicode_escape')\ntsla_sent = pd.read_csv('../input/msft-and-tesla-stock/tsla_with_sentiment_label.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:20:24.505565Z","iopub.execute_input":"2024-07-30T15:20:24.506275Z","iopub.status.idle":"2024-07-30T15:20:24.583215Z","shell.execute_reply.started":"2024-07-30T15:20:24.506240Z","shell.execute_reply":"2024-07-30T15:20:24.581957Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"msft.columns = msft.columns.str.lower()\nmsft_sent.columns = msft_sent.columns.str.lower()\ntsla.columns = tsla.columns.str.lower()\ntsla_sent.columns = tsla_sent.columns.str.lower()\n\nmsft['date'] = pd.to_datetime(msft['date'])\nmsft_sent['date'] = pd.to_datetime(msft_sent['date'])\ntsla['date'] = pd.to_datetime(tsla['date'])\ntsla_sent['date'] = pd.to_datetime(tsla_sent['date'])","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:03.183316Z","iopub.execute_input":"2024-07-30T15:22:03.183824Z","iopub.status.idle":"2024-07-30T15:22:03.229513Z","shell.execute_reply.started":"2024-07-30T15:22:03.183789Z","shell.execute_reply":"2024-07-30T15:22:03.228316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# EDA,  Data Cleansing and Preprocessing","metadata":{}},{"cell_type":"code","source":"msft.columns = msft.columns.str.lower()\n\n# Showing data\nshow(msft.tail())","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:07.606967Z","iopub.execute_input":"2024-07-30T15:22:07.607424Z","iopub.status.idle":"2024-07-30T15:22:07.741358Z","shell.execute_reply.started":"2024-07-30T15:22:07.607381Z","shell.execute_reply":"2024-07-30T15:22:07.740059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"###########Microsoft Stock Data Info#############\")\nmsft.info()\nprint(\"###########Microsoft Stock Data Description#############\")\nmsft.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:08.857996Z","iopub.execute_input":"2024-07-30T15:22:08.858867Z","iopub.status.idle":"2024-07-30T15:22:08.918776Z","shell.execute_reply.started":"2024-07-30T15:22:08.858822Z","shell.execute_reply":"2024-07-30T15:22:08.917451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"msft['date'] = pd.to_datetime(msft['date'])\nplt.figure(figsize=(15,10))\nplt.plot(msft['date'],msft['close'])\n# msft.plot()\nplt.ylabel('close')\nplt.xlabel(None)\nplt.xticks(rotation = 45 )\nplt.title(\"Line Chart of Microsoft Stock Price\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:09.836046Z","iopub.execute_input":"2024-07-30T15:22:09.836458Z","iopub.status.idle":"2024-07-30T15:22:11.167333Z","shell.execute_reply.started":"2024-07-30T15:22:09.836426Z","shell.execute_reply":"2024-07-30T15:22:11.166095Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### What was the moving average of the stocks?\n- The moving average (MA) is a simple technical analysis tool that smooths out price data by creating a constantly updated average price. The average is taken over a specific period of time, like 10 days, 20 minutes, 30 weeks, or any time period the trader chooses.","metadata":{}},{"cell_type":"code","source":"msft_copy = msft.copy()\nma_day = [10,20,50]\nfor ma in ma_day:\n        column_name = f\"MA for {ma} days\"\n        msft_copy[column_name] = msft[\"close\"].rolling(ma).mean()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:11.679221Z","iopub.execute_input":"2024-07-30T15:22:11.680958Z","iopub.status.idle":"2024-07-30T15:22:11.692988Z","shell.execute_reply.started":"2024-07-30T15:22:11.680915Z","shell.execute_reply":"2024-07-30T15:22:11.691377Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# fig, axes = plt.subplots(nrows =2, ncols = 2)\n# fig.set_figheight(10)\n# fig.set_figwidth(15)\n\n# msft[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\n# axes[0,0].set_title('Microsoft')\n# plt.figure(figsize=(15,10))\nmsft_copy[['close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(figsize=(15,10),title='Microsoft Stock Price every 10,20,50 rolling days')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:13.000436Z","iopub.execute_input":"2024-07-30T15:22:13.000861Z","iopub.status.idle":"2024-07-30T15:22:14.390103Z","shell.execute_reply.started":"2024-07-30T15:22:13.000830Z","shell.execute_reply":"2024-07-30T15:22:14.388891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Here's a markdown representation of the standard deviation formula:\n\n### Standard Deviation Formula\n\nThe **standard deviation** of a set of data points measures the amount of variation or dispersion from the average (mean) value. It's a crucial statistical measure used in data analysis.\n\n\n$$\n\\sigma = \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N} (x_i - \\mu)^2}\n$$\n","metadata":{}},{"cell_type":"code","source":"pct_chart(msft,'Microsoft')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:16.853022Z","iopub.execute_input":"2024-07-30T15:22:16.853455Z","iopub.status.idle":"2024-07-30T15:22:17.382413Z","shell.execute_reply.started":"2024-07-30T15:22:16.853424Z","shell.execute_reply":"2024-07-30T15:22:17.380993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Handling days with no article","metadata":{}},{"cell_type":"code","source":"msft_sent.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:19.540026Z","iopub.execute_input":"2024-07-30T15:22:19.540475Z","iopub.status.idle":"2024-07-30T15:22:19.556767Z","shell.execute_reply.started":"2024-07-30T15:22:19.540440Z","shell.execute_reply":"2024-07-30T15:22:19.555355Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"msft_sent['label'].value_counts(dropna=False).to_frame('count').join(\n    msft_sent['label'].value_counts(dropna=False, normalize=True).to_frame('normalize')\n).round(4)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:20.696344Z","iopub.execute_input":"2024-07-30T15:22:20.696865Z","iopub.status.idle":"2024-07-30T15:22:20.719455Z","shell.execute_reply.started":"2024-07-30T15:22:20.696734Z","shell.execute_reply":"2024-07-30T15:22:20.718209Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 1. Check news data during no-business days\nmissing_stock_dates = pd.date_range(start = '2020-01-01', end = '2024-06-28' ).difference(msft.date) # no-business days\nmissing_sent_dates = pd.date_range(start = '2020-01-01', end = '2024-06-28' ).difference(msft_sent.date) #no-news days\nno_trade_dates = missing_stock_dates.tolist()\n# MSFT Article when no trade\nmsft_sent.loc[(msft_sent[\"date\"].isin(no_trade_dates))]","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:21.909438Z","iopub.execute_input":"2024-07-30T15:22:21.909946Z","iopub.status.idle":"2024-07-30T15:22:21.941506Z","shell.execute_reply.started":"2024-07-30T15:22:21.909907Z","shell.execute_reply":"2024-07-30T15:22:21.940398Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"147 out of 1535 articles were published on non-trading days (non-business days).","metadata":{}},{"cell_type":"code","source":"# MSFT Articles on Trading Days\nmsft_sent_trade = msft_sent.loc[~(msft_sent[\"date\"].isin(no_trade_dates))].sort_values(by='date').reset_index(drop=True)\nmsft_sent_trade","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:23.787637Z","iopub.execute_input":"2024-07-30T15:22:23.788092Z","iopub.status.idle":"2024-07-30T15:22:23.811043Z","shell.execute_reply.started":"2024-07-30T15:22:23.788060Z","shell.execute_reply":"2024-07-30T15:22:23.809824Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_date_list = msft['date'].tolist()\ntrading_day_num = len(stock_date_list)\nprint(f'Total number of stock trading days :{len(stock_date_list)}')\nsent_date_list = msft_sent_trade['date'].tolist()\n\nfor date in sent_date_list:\n    if date in stock_date_list:\n        stock_date_list.remove(date)\nprint(f'Total number of no article days during stock trading days :{len(stock_date_list)}')\n\nprint(f'Percentage of No article days : {(len(stock_date_list)/trading_day_num)*100:.2f} %')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:26.215906Z","iopub.execute_input":"2024-07-30T15:22:26.216308Z","iopub.status.idle":"2024-07-30T15:22:26.313032Z","shell.execute_reply.started":"2024-07-30T15:22:26.216280Z","shell.execute_reply":"2024-07-30T15:22:26.311826Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Percentages and count of each sentiment label","metadata":{}},{"cell_type":"code","source":"sentiment_count = msft_sent['label'].value_counts(dropna=False).to_frame('count').join(\n    msft_sent['label'].value_counts(dropna=False, normalize=True).to_frame('normalize')\n).round(4)\nsentiment_count","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:28.283911Z","iopub.execute_input":"2024-07-30T15:22:28.284311Z","iopub.status.idle":"2024-07-30T15:22:28.300134Z","shell.execute_reply.started":"2024-07-30T15:22:28.284282Z","shell.execute_reply":"2024-07-30T15:22:28.298972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Defining colors for the pie chart \ncolors = ['pink', 'silver', 'steelblue'] \n  \n# Define the ratio of gap of each fragment in a tuple \nexplode = (0.05, 0.05, 0.05) \nsentiment_count.plot.pie(y='count',figsize=(5, 5),subplots=True,autopct='%1.2f%%', \n  colors=colors, explode=explode)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:29.601886Z","iopub.execute_input":"2024-07-30T15:22:29.602321Z","iopub.status.idle":"2024-07-30T15:22:29.894805Z","shell.execute_reply.started":"2024-07-30T15:22:29.602288Z","shell.execute_reply":"2024-07-30T15:22:29.893249Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"article_count_by_date = msft_sent['date'].value_counts(dropna=False).to_frame('count')\narticle_count_by_date['date'] = article_count_by_date.index\narticle_count_by_date = article_count_by_date.reset_index(drop= True)\narticle_count_by_date","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:32.619813Z","iopub.execute_input":"2024-07-30T15:22:32.620243Z","iopub.status.idle":"2024-07-30T15:22:32.637988Z","shell.execute_reply.started":"2024-07-30T15:22:32.620208Z","shell.execute_reply":"2024-07-30T15:22:32.636683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"msft_sent_trade[msft_sent['date'] == '2023-11-20']","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:34.049332Z","iopub.execute_input":"2024-07-30T15:22:34.049739Z","iopub.status.idle":"2024-07-30T15:22:34.067246Z","shell.execute_reply.started":"2024-07-30T15:22:34.049703Z","shell.execute_reply":"2024-07-30T15:22:34.065990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(20,10))\nax.bar(article_count_by_date['date'], article_count_by_date['count'], width=3,color='#008080')\nax.xaxis_date()\nplt.title('Article Count During Trading Days')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:35.436198Z","iopub.execute_input":"2024-07-30T15:22:35.436633Z","iopub.status.idle":"2024-07-30T15:22:38.145414Z","shell.execute_reply.started":"2024-07-30T15:22:35.436598Z","shell.execute_reply":"2024-07-30T15:22:38.144132Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Sentiment Score","metadata":{}},{"cell_type":"markdown","source":"### Data Preprocessing","metadata":{}},{"cell_type":"code","source":"msft_sent = msft_sent.sort_values(by='date')\nmsft_sent","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:39.235640Z","iopub.execute_input":"2024-07-30T15:22:39.236077Z","iopub.status.idle":"2024-07-30T15:22:39.251699Z","shell.execute_reply.started":"2024-07-30T15:22:39.236042Z","shell.execute_reply":"2024-07-30T15:22:39.250430Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Add the numeric label of sentiment\n- if label is Positive, 1\n- if label is Neutral, 0\n- if label is Negative, -1","metadata":{}},{"cell_type":"code","source":"\nmsft_sent['sentiment'] = msft_sent[\"label\"].apply(lambda x: 1 if x == 'positive' else (-1 if x == 'negative' else 0))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:41.627631Z","iopub.execute_input":"2024-07-30T15:22:41.628076Z","iopub.status.idle":"2024-07-30T15:22:41.636975Z","shell.execute_reply.started":"2024-07-30T15:22:41.628041Z","shell.execute_reply":"2024-07-30T15:22:41.635621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"msft_sent","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:42.742392Z","iopub.execute_input":"2024-07-30T15:22:42.742820Z","iopub.status.idle":"2024-07-30T15:22:42.757871Z","shell.execute_reply.started":"2024-07-30T15:22:42.742779Z","shell.execute_reply":"2024-07-30T15:22:42.756704Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sent_score = msft_sent.groupby([msft_sent['date']])['sentiment'].mean().to_frame('score')\nsent_score['date'] = sent_score.index\nsent_score['date'] = pd.to_datetime(sent_score['date'])\nsent_score = sent_score.reset_index(drop=True)\nsent_score","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:43.716978Z","iopub.execute_input":"2024-07-30T15:22:43.717389Z","iopub.status.idle":"2024-07-30T15:22:43.743090Z","shell.execute_reply.started":"2024-07-30T15:22:43.717342Z","shell.execute_reply":"2024-07-30T15:22:43.741455Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sent_score.info()\nsent_score.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:44.735806Z","iopub.execute_input":"2024-07-30T15:22:44.737121Z","iopub.status.idle":"2024-07-30T15:22:44.764196Z","shell.execute_reply.started":"2024-07-30T15:22:44.737079Z","shell.execute_reply":"2024-07-30T15:22:44.762951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f'@@@@@@@@@@@@Negative Sentiment@@@@@@@@@@@@@@@')\nneg = sent_score[sent_score['score'] <0].count().tolist()[0]\nprint(f'Count : {neg}')\nprint(f'Percentage: {(neg/len(sent_score))*100:.2f} %')\nprint(f'@@@@@@@@@@@@Neutral Sentiment@@@@@@@@@@@@@@@')\nneu = sent_score[sent_score['score'] ==0].count().tolist()[0]\nprint(f'Count : {neu}')\nprint(f'Percentage: {(neu/len(sent_score))*100:.2f} %')\n\nprint(f'@@@@@@@@@@@@Positive Sentiment@@@@@@@@@@@@@@@')\npos = sent_score[sent_score['score'] >0].count().tolist()[0]\nprint(f'Count : {pos}')\nprint(f'Percentage: {(pos/len(sent_score))*100:.2f} %')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:46.049530Z","iopub.execute_input":"2024-07-30T15:22:46.050001Z","iopub.status.idle":"2024-07-30T15:22:46.065379Z","shell.execute_reply.started":"2024-07-30T15:22:46.049965Z","shell.execute_reply":"2024-07-30T15:22:46.063941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Number of days having sentiment score')\nlen(msft_sent['date'].unique().tolist())","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:47.577057Z","iopub.execute_input":"2024-07-30T15:22:47.577530Z","iopub.status.idle":"2024-07-30T15:22:47.588784Z","shell.execute_reply.started":"2024-07-30T15:22:47.577494Z","shell.execute_reply":"2024-07-30T15:22:47.587400Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Sentiment score')\nsent_score['score'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:49.137539Z","iopub.execute_input":"2024-07-30T15:22:49.138055Z","iopub.status.idle":"2024-07-30T15:22:49.147615Z","shell.execute_reply.started":"2024-07-30T15:22:49.138020Z","shell.execute_reply":"2024-07-30T15:22:49.146226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"score_date_list =sent_score['date'].dt.strftime('%Y-%m-%d').tolist()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:50.247472Z","iopub.execute_input":"2024-07-30T15:22:50.247903Z","iopub.status.idle":"2024-07-30T15:22:50.255758Z","shell.execute_reply.started":"2024-07-30T15:22:50.247871Z","shell.execute_reply":"2024-07-30T15:22:50.254290Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"whole_dates = pd.date_range(start = '2020-01-02', end = '2024-06-28' ).strftime('%Y-%m-%d').tolist()\n# missing_sent_dates = pd.date_range(start = '2020-01-01', end = '2024-06-28' ).difference(msft_sent.date) # 뉴스 없는 날\nno_sent_dates = list(set(whole_dates) - set(score_date_list)) \n# no_sent_dates\nno_sent_dates.sort(reverse=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:51.359225Z","iopub.execute_input":"2024-07-30T15:22:51.360272Z","iopub.status.idle":"2024-07-30T15:22:51.369814Z","shell.execute_reply.started":"2024-07-30T15:22:51.360235Z","shell.execute_reply":"2024-07-30T15:22:51.368396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datetime import timedelta\nimport math \n\nadded_sent_score = sent_score\ntmp = []\n\nfor d in no_sent_dates:\n    n = 1\n    while True:\n        day_before = (datetime.strptime(d, '%Y-%m-%d')-timedelta(days=n)).strftime('%Y-%m-%d')\n        n_day_before_sent = sent_score[sent_score['date'].dt.strftime('%Y-%m-%d') == day_before]['score'].astype('float').tolist()\n        if len(n_day_before_sent) == 0:\n            n+=1\n            continue\n        else:\n\n            score = n_day_before_sent[0] * math.pow(0.5,n)\n            new_row = {'date': d, 'score': score}\n            tmp.append(new_row)\n            break","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:52.439847Z","iopub.execute_input":"2024-07-30T15:22:52.440238Z","iopub.status.idle":"2024-07-30T15:22:56.021534Z","shell.execute_reply.started":"2024-07-30T15:22:52.440208Z","shell.execute_reply":"2024-07-30T15:22:56.019980Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"no_article_day_sent_score = pd.DataFrame(tmp,columns=['date','score'])\nno_article_day_sent_score","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:56.023624Z","iopub.execute_input":"2024-07-30T15:22:56.024027Z","iopub.status.idle":"2024-07-30T15:22:56.041319Z","shell.execute_reply.started":"2024-07-30T15:22:56.023994Z","shell.execute_reply":"2024-07-30T15:22:56.039959Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"no_article_day_sent_score.plot.hist(bins=len(no_article_day_sent_score['score'].unique()), alpha=0.5,)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:56.042923Z","iopub.execute_input":"2024-07-30T15:22:56.043297Z","iopub.status.idle":"2024-07-30T15:22:56.687453Z","shell.execute_reply.started":"2024-07-30T15:22:56.043266Z","shell.execute_reply":"2024-07-30T15:22:56.686164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sent_score.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:56.690004Z","iopub.execute_input":"2024-07-30T15:22:56.690425Z","iopub.status.idle":"2024-07-30T15:22:56.703457Z","shell.execute_reply.started":"2024-07-30T15:22:56.690361Z","shell.execute_reply":"2024-07-30T15:22:56.701950Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# data with news, no shift, coefficient B = 0.5\nno_article_day_sent_score['date'] = pd.to_datetime(no_article_day_sent_score['date'])\nmsft_score =pd.concat([sent_score,no_article_day_sent_score]).sort_values('date')\nmerged_msft_score_on_trade = msft_score.loc[~(msft_score[\"date\"].isin(no_trade_dates))].sort_values(by='date').reset_index(drop=True)\nmerged_msft_data = pd.merge(msft,merged_msft_score_on_trade,on='date').sort_values(by='date')\nmerged_msft_data","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:22:56.704862Z","iopub.execute_input":"2024-07-30T15:22:56.705317Z","iopub.status.idle":"2024-07-30T15:22:56.743794Z","shell.execute_reply.started":"2024-07-30T15:22:56.705274Z","shell.execute_reply":"2024-07-30T15:22:56.742629Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# No coefficient B\nno_coef = []\nfor d in no_sent_dates:\n    new_row = {'date': d, 'score': 0}\n    no_coef.append(new_row)\nno_article_day_fill_zero = pd.DataFrame(no_coef,columns=['date','score'])\nno_article_day_fill_zero['date'] = pd.to_datetime(no_article_day_fill_zero['date'])\nmsft_score_fill_zero = pd.concat([sent_score,no_article_day_fill_zero]).sort_values('date')\nmerged_msft_score_fill_zero = msft_score_fill_zero.loc[~(msft_score_fill_zero[\"date\"].isin(no_trade_dates))].sort_values(by='date').reset_index(drop=True)\nmerged_msft_data_fill_zero = pd.merge(msft,merged_msft_score_fill_zero,on='date').sort_values(by='date')\nmerged_msft_data_fill_zero","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:00.163207Z","iopub.execute_input":"2024-07-30T15:23:00.163637Z","iopub.status.idle":"2024-07-30T15:23:00.205744Z","shell.execute_reply.started":"2024-07-30T15:23:00.163606Z","shell.execute_reply":"2024-07-30T15:23:00.204459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"merged_msft_data = merged_msft_data_fill_zero","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:20.716610Z","iopub.execute_input":"2024-07-30T15:23:20.717097Z","iopub.status.idle":"2024-07-30T15:23:20.723429Z","shell.execute_reply.started":"2024-07-30T15:23:20.717062Z","shell.execute_reply":"2024-07-30T15:23:20.722128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# LSTM Data Prep","metadata":{}},{"cell_type":"markdown","source":"## Feature Scaling","metadata":{}},{"cell_type":"markdown","source":"<center>\n<img src=\"https://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-chain.png\"  width=\"60%\" height=\"30%\">\n</center>\n\nIn machine learning, it's often crucial, especialy when using neural networks, to normalize data before feeding it into a model. This process adjusts values measured on different scales to a notionally common scale, often prior to averaging. Here, we use the `MinMaxScaler` from the `sklearn.preprocessing` package, which scales each feature by its maximum and minimum values. This scaler transforms each value `v` in a feature column to `v'` in the range [0, 1] using the following formula:\n$$v' = \\frac{v - \\text{min}(v)}{\\text{max}(v) - \\text{min}(v)}$$\n- `v` is the original value.\n- `min(v)` is the minimum value in the feature column.\n- `max(v)` is the maximum value in the feature column.\nThe columns `['open', 'high', 'low', 'close', 'volume']` from the Tesla stock dataset are normalized, which includes the opening, high, low, and closing prices along with the trading volume. Normalizing these features allows for a more stable and faster convergence during the training of neural networks, like the LSTM model we'll be using for stock price forecasting.","metadata":{}},{"cell_type":"code","source":"train_dates = pd.to_datetime(merged_msft_data['date'])\n# print(train_dates.tail(15)) #Check last few dates.\n\n#Variables for training\ncols = [\n    'open',\n    'high', 'low',\n    'adj close',\n     'volume',\n    'close',\n    'score',\n        ]\n#Date and volume columns are not used in training.\nprint(cols)\n\n#New dataframe with only training data - 5 columns\ndf_for_training = merged_msft_data[cols].astype(float)\ndf_for_training.index=merged_msft_data['date']\ndf_for_training","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:26.827676Z","iopub.execute_input":"2024-07-30T15:23:26.829438Z","iopub.status.idle":"2024-07-30T15:23:26.858726Z","shell.execute_reply.started":"2024-07-30T15:23:26.829387Z","shell.execute_reply":"2024-07-30T15:23:26.857350Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Scailing no-shift dataset","metadata":{}},{"cell_type":"code","source":"scaler = MinMaxScaler()\nscaler = scaler.fit(df_for_training)\ndf_for_training_scaled = scaler.transform(df_for_training)\n\nscaler_for_inference = MinMaxScaler()\nscaler_for_inference.fit_transform(df_for_training.loc[:,['close']])\n\ndf_for_training_scaled\n# df_for_training_scaled=df_for_training.copy()\n# df_for_training_scaled=df_for_training_scaled.to_numpy()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:29.563882Z","iopub.execute_input":"2024-07-30T15:23:29.564413Z","iopub.status.idle":"2024-07-30T15:23:29.584459Z","shell.execute_reply.started":"2024-07-30T15:23:29.564339Z","shell.execute_reply":"2024-07-30T15:23:29.583117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Train & Test set Split","metadata":{}},{"cell_type":"markdown","source":"### As required for LSTM networks, it is required to reshape an input data into n_samples x timesteps x n_features.","metadata":{}},{"cell_type":"code","source":"#Empty lists to be populated using formatted training data\ntrainX = []\ntrainY = []\n\nn_future = 1   # Number of days we want to look into the future based on the past days.\nn_past = 5  # Number of past days we want to use to predict the future.\n\n#Reformat input data into a shape: (n_samples x timesteps x n_features)\n#In my example, my df_for_training_scaled has a shape (12823, 5)\n#12823 refers to the number of data points and 5 refers to the columns (multi-variables).\nfor i in range(n_past, len(df_for_training_scaled) - n_future +1):\n    trainX.append(df_for_training_scaled[i - n_past:i, 0:df_for_training.shape[1]])\n    trainY.append(df_for_training_scaled[i + n_future - 1:i + n_future,[-2]])\ntrainX, trainY = np.array(trainX), np.array(trainY)\n\nprint('TrainX shape = {}.'.format(trainX.shape))\nprint('TrainY shape = {}.'.format(trainY.shape))","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:33.895538Z","iopub.execute_input":"2024-07-30T15:23:33.895945Z","iopub.status.idle":"2024-07-30T15:23:33.922586Z","shell.execute_reply.started":"2024-07-30T15:23:33.895914Z","shell.execute_reply":"2024-07-30T15:23:33.921435Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train_lstm_without_news, X_test_lstm_without_news, y_train_lstm_without_news, y_test_lstm_without_news = train_test_split(trainX[:,:,:-1], trainY, test_size=0.1, shuffle=False)\n\nX_train_lstm_news, X_test_lstm_news, y_train_lstm_news, y_test_lstm_news = train_test_split(trainX, trainY, test_size=0.1, shuffle=False)\n\nX_train_lstm_without_news.shape,X_train_lstm_news.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:36.165894Z","iopub.execute_input":"2024-07-30T15:23:36.166290Z","iopub.status.idle":"2024-07-30T15:23:36.295246Z","shell.execute_reply.started":"2024-07-30T15:23:36.166262Z","shell.execute_reply":"2024-07-30T15:23:36.294125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_lstm_without_news, X_val_lstm_without_news, y_train_lstm_without_news, y_val_lstm_without_news = train_test_split(X_train_lstm_without_news, y_train_lstm_without_news, test_size=0.1, shuffle=False)\n\nX_train_lstm_news, X_val_lstm_news, y_train_lstm_news, y_val_lstm_news = train_test_split(X_train_lstm_news, y_train_lstm_news, test_size=0.1, shuffle=False)\n\nX_train_lstm_without_news.shape,X_train_lstm_news.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:38.132965Z","iopub.execute_input":"2024-07-30T15:23:38.133380Z","iopub.status.idle":"2024-07-30T15:23:38.145622Z","shell.execute_reply.started":"2024-07-30T15:23:38.133332Z","shell.execute_reply":"2024-07-30T15:23:38.144267Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- A bidirectional LSTM is a type of RNN architecture designed to process and analyze sequential data. Unlike traditional LSTMs that read sequences in one direction, bidirectional LSTMs process data in both forward and backward directions simultaneously. This bidirectional processing allows the model to capture dependencies from both past and future contexts.\n\n- During the training phase, the bidirectional LSTM considers information from earlier time steps to later ones, and vice versa. This helps the model understand patterns that may exist across various points in the sequence. The bidirectional LSTM consists of two separate layers – one processing the sequence from the beginning to the end, and the other from the end to the beginning. The outputs from both directions are typically concatenated or combined to provide a more comprehensive representation of the input sequence.\n\n- This architecture is useful in tasks where understanding both past and future information is essential, such as time-series analysis and natural language processing. By incorporating bidirectional processing, the LSTM becomes more adept at capturing complex relationships within sequential data.","metadata":{}},{"cell_type":"markdown","source":"# Model architecture","metadata":{}},{"cell_type":"markdown","source":"## Build LSTM model","metadata":{}},{"cell_type":"markdown","source":"### LSTM","metadata":{}},{"cell_type":"code","source":"def build_lstm_model(input_shape):     \n    # Build the LSTM model\n    model = Sequential()\n    model.add(LSTM(128, return_sequences=True, input_shape= input_shape))\n    model.add(LSTM(64, return_sequences=False))\n    model.add(Dense(25))\n    model.add(Dense(1))\n    \n#     model = Sequential()\n#     model.add(LSTM(64, input_shape=input_shape, \n#                return_sequences=True))\n#     model.add(LSTM(32, return_sequences=False))\n#     model.add(Dense(input_shape[0]))\n\n    # Compile the model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    model.summary()\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:42.752692Z","iopub.execute_input":"2024-07-30T15:23:42.753167Z","iopub.status.idle":"2024-07-30T15:23:42.762158Z","shell.execute_reply.started":"2024-07-30T15:23:42.753132Z","shell.execute_reply":"2024-07-30T15:23:42.760853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lstm_cp_without_news = ModelCheckpoint('lstm_msft_no_news.keras', monitor='val_loss', save_best_only=True)\nlstm_cp_news = ModelCheckpoint('lstm_msft_news.keras', monitor='val_loss', save_best_only=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:23:45.330663Z","iopub.execute_input":"2024-07-30T15:23:45.331137Z","iopub.status.idle":"2024-07-30T15:23:45.338400Z","shell.execute_reply.started":"2024-07-30T15:23:45.331099Z","shell.execute_reply":"2024-07-30T15:23:45.336055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### fit the model without news","metadata":{}},{"cell_type":"code","source":"lstm_without_news = build_lstm_model((X_train_lstm_without_news.shape[1],X_train_lstm_without_news.shape[2]))\nhistory_without_news = lstm_without_news.fit(X_train_lstm_without_news, y_train_lstm_without_news, \n                                             epochs=120, batch_size=64, \n                                             validation_data=(X_val_lstm_without_news, y_val_lstm_without_news),\n                                             callbacks=[lstm_cp_without_news], verbose=0)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:11:06.691957Z","iopub.execute_input":"2024-07-30T16:11:06.692457Z","iopub.status.idle":"2024-07-30T16:11:41.104600Z","shell.execute_reply.started":"2024-07-30T16:11:06.692419Z","shell.execute_reply":"2024-07-30T16:11:41.102916Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_training_history(history_without_news.history,\n                      plot_title='LSTM Model Loss without news')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:11:46.835754Z","iopub.execute_input":"2024-07-30T16:11:46.836237Z","iopub.status.idle":"2024-07-30T16:11:46.855683Z","shell.execute_reply.started":"2024-07-30T16:11:46.836202Z","shell.execute_reply":"2024-07-30T16:11:46.854383Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"testing_dates= df_for_training.index[-X_test_lstm_without_news.shape[0]:]\n#Make prediction\ntesting_prediction_without_news = lstm_without_news.predict(X_test_lstm_without_news)\ntesting_prediction_without_news=testing_prediction_without_news.reshape(testing_prediction_without_news.shape[0], testing_prediction_without_news.shape[1])\ny_test_pred_lstm_without_news = scaler_for_inference.inverse_transform(testing_prediction_without_news)\ny_test_actual_lstm_reshaped_without_news=y_test_lstm_without_news.reshape(y_test_lstm_without_news.shape[0], y_test_lstm_without_news.shape[2])\ny_test_actual_lstm = scaler_for_inference.inverse_transform(y_test_actual_lstm_reshaped_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:11:53.055475Z","iopub.execute_input":"2024-07-30T16:11:53.056568Z","iopub.status.idle":"2024-07-30T16:11:53.769748Z","shell.execute_reply.started":"2024-07-30T16:11:53.056528Z","shell.execute_reply":"2024-07-30T16:11:53.768327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_predictions_with_dates('LSTM','Testing',False,testing_dates,y_test_actual_lstm,y_test_pred_lstm_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:11:58.346684Z","iopub.execute_input":"2024-07-30T16:11:58.347133Z","iopub.status.idle":"2024-07-30T16:11:59.338170Z","shell.execute_reply.started":"2024-07-30T16:11:58.347098Z","shell.execute_reply":"2024-07-30T16:11:59.336936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions_without_news = y_test_pred_lstm_without_news\n\ncols_without_news = [  'open',\n    'high', 'low',\n    'adj close',\n     'volume',\n    'close',]\n# Showing predictions and data\nindex_1_without_news= y_test_lstm_without_news.shape[0]\ndf_y_test_without_news = msft[cols_without_news].iloc[-index_1_without_news:]\ndf_predictions_without_news = pd.DataFrame(predictions_without_news, index=df_y_test_without_news.index, columns=[f'pred_{col}' for col in ['close']])\n\ndf_test_pred_without_news = pd.concat([df_y_test_without_news, df_predictions_without_news], axis=1)\n                         \n# Shwoing outputs\nshow(df_test_pred_without_news.tail())\n# Residual Analysis Plot\nplotly_residual_analysis(df_test_pred_without_news, \n                         title_add=f'LSTM without News')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:17:57.768720Z","iopub.execute_input":"2024-07-30T16:17:57.769231Z","iopub.status.idle":"2024-07-30T16:17:58.045173Z","shell.execute_reply.started":"2024-07-30T16:17:57.769193Z","shell.execute_reply":"2024-07-30T16:17:58.043801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### with news","metadata":{}},{"cell_type":"code","source":"lstm_with_news = build_lstm_model((X_train_lstm_news.shape[1],X_train_lstm_news.shape[2]))\nhistory_news = lstm_with_news.fit(X_train_lstm_news, y_train_lstm_news, \n                                  epochs=120, batch_size=64, \n                                  validation_data=(X_val_lstm_news, y_val_lstm_news),\n                                  callbacks=[lstm_cp_news], verbose=0)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:06:49.140576Z","iopub.execute_input":"2024-07-30T16:06:49.141870Z","iopub.status.idle":"2024-07-30T16:07:26.623718Z","shell.execute_reply.started":"2024-07-30T16:06:49.141804Z","shell.execute_reply":"2024-07-30T16:07:26.622586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_training_history(history_news.history,\n                      plot_title='LSTM Model Loss with news')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:07:53.824702Z","iopub.execute_input":"2024-07-30T16:07:53.825150Z","iopub.status.idle":"2024-07-30T16:07:53.848237Z","shell.execute_reply.started":"2024-07-30T16:07:53.825119Z","shell.execute_reply":"2024-07-30T16:07:53.846820Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"testing_prediction_news = lstm_with_news.predict(X_test_lstm_news)\ntesting_prediction_news=testing_prediction_news.reshape(testing_prediction_news.shape[0], testing_prediction_news.shape[1])\ny_test_pred_lstm_news = scaler_for_inference.inverse_transform(testing_prediction_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:08:01.114926Z","iopub.execute_input":"2024-07-30T16:08:01.115398Z","iopub.status.idle":"2024-07-30T16:08:01.819806Z","shell.execute_reply.started":"2024-07-30T16:08:01.115346Z","shell.execute_reply":"2024-07-30T16:08:01.818490Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_predictions_with_dates('LSTM','Testing',True,testing_dates,y_test_actual_lstm,y_test_pred_lstm_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:08:05.166827Z","iopub.execute_input":"2024-07-30T16:08:05.167247Z","iopub.status.idle":"2024-07-30T16:08:06.126966Z","shell.execute_reply.started":"2024-07-30T16:08:05.167214Z","shell.execute_reply":"2024-07-30T16:08:06.125816Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = y_test_pred_lstm_news\n\n# Showing predictions and data\nindex_1= y_test_lstm_news.shape[0]\ndf_y_test = merged_msft_data[cols].iloc[-index_1:]\ndf_predictions = pd.DataFrame(predictions, index=df_y_test.index, columns=[f'pred_{col}' for col in ['close']])\n\ndf_test_pred = pd.concat([df_y_test, df_predictions], axis=1)\n                         \n# Shwoing outputs\nshow(df_test_pred.tail())\n\n# Residual Analysis Plot\nplotly_residual_analysis(df_test_pred, \n                         title_add=f'LSTM with News')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T16:15:37.358768Z","iopub.execute_input":"2024-07-30T16:15:37.359281Z","iopub.status.idle":"2024-07-30T16:15:37.635250Z","shell.execute_reply.started":"2024-07-30T16:15:37.359240Z","shell.execute_reply":"2024-07-30T16:15:37.633668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### CNN-LSTM","metadata":{}},{"cell_type":"code","source":"def build_model(input_shape):\n    tf.random.set_seed(seed)\n    cnn_lstm_model = Sequential()\n\n    cnn_lstm_model.add(Conv1D(filters=128, kernel_size=2, strides=1, padding='valid', input_shape=input_shape))\n    cnn_lstm_model.add(MaxPooling1D(pool_size=2, strides=2))\n\n    cnn_lstm_model.add(Conv1D(filters=64, kernel_size=2, strides=1, padding='valid'))\n    cnn_lstm_model.add(MaxPooling1D(pool_size=1, strides=2))\n    # cnn_lstm_model.add(MaxPooling1D(pool_size=1, strides=2))\n\n    cnn_lstm_model.add(Bidirectional(LSTM(256, return_sequences=True)))\n    cnn_lstm_model.add(Dropout(0.2))\n    cnn_lstm_model.add(Bidirectional(LSTM(256, return_sequences=True)))\n    cnn_lstm_model.add(Dropout(0.2))\n\n    cnn_lstm_model.add(Dense(32, activation='relu'))\n\n\n    cnn_lstm_model.add(Dense(trainY.shape[2], activation='relu'))\n\n    # cnn_lstm_model.build(input_shape=(trainX.shape[0], trainX.shape[1], trainX.shape[2]))\n\n    cnn_lstm_model.compile(optimizer='adam', loss='mse')\n    cnn_lstm_model.summary()\n    return cnn_lstm_model","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:25:35.386133Z","iopub.execute_input":"2024-07-30T15:25:35.386562Z","iopub.status.idle":"2024-07-30T15:25:35.400120Z","shell.execute_reply.started":"2024-07-30T15:25:35.386528Z","shell.execute_reply":"2024-07-30T15:25:35.398400Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cnn_lstm_cp_without_news = ModelCheckpoint('cnn_lstm_msft_no_news.keras', monitor='val_loss', save_best_only=True)\ncnn_lstm_cp_news = ModelCheckpoint('cnn_lstm_msft_news.keras', monitor='val_loss', save_best_only=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:26:30.647968Z","iopub.execute_input":"2024-07-30T15:26:30.648459Z","iopub.status.idle":"2024-07-30T15:26:30.655433Z","shell.execute_reply.started":"2024-07-30T15:26:30.648411Z","shell.execute_reply":"2024-07-30T15:26:30.653860Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## fit the model","metadata":{}},{"cell_type":"code","source":"cnn_lstm_model_without_news=build_model((X_train_lstm_without_news.shape[1],X_train_lstm_without_news.shape[2]))\nhistory_without_news = cnn_lstm_model_without_news.fit(X_train_lstm_without_news, y_train_lstm_without_news, \n                                                       epochs=50, batch_size=64, \n                                                       validation_data=(X_val_lstm_without_news, y_val_lstm_without_news),\n                                                       callbacks=[cnn_lstm_cp_without_news], verbose=0)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:26:37.137813Z","iopub.execute_input":"2024-07-30T15:26:37.138251Z","iopub.status.idle":"2024-07-30T15:27:13.469693Z","shell.execute_reply.started":"2024-07-30T15:26:37.138218Z","shell.execute_reply":"2024-07-30T15:27:13.468456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### with news : no shift,the attenuation coefficient B to 0.5","metadata":{}},{"cell_type":"code","source":"# fit the model\ncnn_lstm_model_news=build_model((X_train_lstm_news.shape[1],X_train_lstm_news.shape[2]))\nhistory_news = cnn_lstm_model_news.fit(X_train_lstm_news, y_train_lstm_news, \n                                       epochs=100, batch_size=64, \n                                       validation_data=(X_val_lstm_news, y_val_lstm_news),\n                                       callbacks=[cnn_lstm_cp_news], verbose=0, )","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:39:28.070742Z","iopub.execute_input":"2024-07-30T15:39:28.071382Z","iopub.status.idle":"2024-07-30T15:40:27.928657Z","shell.execute_reply.started":"2024-07-30T15:39:28.071311Z","shell.execute_reply":"2024-07-30T15:40:27.927457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Learning curve : Plotting Training and validation loss","metadata":{}},{"cell_type":"markdown","source":"### without news","metadata":{}},{"cell_type":"code","source":"plot_training_history(history_without_news.history,\n                      plot_title='CNN-LSTM Model Loss without news')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:28:36.366257Z","iopub.execute_input":"2024-07-30T15:28:36.367608Z","iopub.status.idle":"2024-07-30T15:28:36.386804Z","shell.execute_reply.started":"2024-07-30T15:28:36.367539Z","shell.execute_reply":"2024-07-30T15:28:36.385458Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### no shift,the attenuation coefficient B to 0.0","metadata":{}},{"cell_type":"code","source":"plot_training_history(history_news.history,\n                      plot_title='CNN-LSTM Model Loss with news')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:47:45.512515Z","iopub.execute_input":"2024-07-30T15:47:45.513049Z","iopub.status.idle":"2024-07-30T15:47:45.534444Z","shell.execute_reply.started":"2024-07-30T15:47:45.513008Z","shell.execute_reply":"2024-07-30T15:47:45.533132Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error,mean_absolute_error,mean_absolute_percentage_error\nfrom math import sqrt\n\ndef plot_predictions_with_dates (model,type,news,dates,y_actual_lstm,y_pred_lstm):\n    predicted_features=['close']\n    for i,predicted_feature in enumerate(predicted_features):\n        plt.figure(figsize=(15,6))\n        if news :\n            plt.title(f'{model} {type} prediction of {predicted_feature} feature After adding news sentiment analysis')\n        else:\n            plt.title(f'{model} {type} prediction of {predicted_feature} feature without news sentiment analysis')\n        sns.lineplot(x=dates, y=y_actual_lstm[:,i],label='Actual')\n        sns.lineplot(x=dates, y=y_pred_lstm[:, i], label='Predicted')\n        plt.show()\n        MAE = mean_absolute_error(y_actual_lstm[:,i], y_pred_lstm[:, i])\n        RMSE=np.sqrt(mean_squared_error(y_actual_lstm[:,i], y_pred_lstm[:, i]))\n        MAPE = np.mean(np.abs((y_actual_lstm[:,i] - y_pred_lstm[:, i])/y_actual_lstm[:,i]))*100\n        #MAPE=mean_absolute_percentage_error(y_actual_lstm[:,i], y_pred_lstm[:, i])\n        print(f'MAE for {predicted_feature} ={MAE}')\n        print(f'RMSE for {predicted_feature} ={RMSE}')\n        print(f'MAPE for {predicted_feature} ={MAPE}')\n        print(f'MSE for {predicted_feature}={mean_squared_error(y_actual_lstm[:,i], y_pred_lstm[:, i])}')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:24:30.009516Z","iopub.execute_input":"2024-07-30T15:24:30.010812Z","iopub.status.idle":"2024-07-30T15:24:30.022740Z","shell.execute_reply.started":"2024-07-30T15:24:30.010766Z","shell.execute_reply":"2024-07-30T15:24:30.021247Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Computing training accuracy","metadata":{}},{"cell_type":"code","source":"training_dates= df_for_training.index[:X_train_lstm_without_news.shape[0]]\n#Make prediction\ntraining_prediction_without_news = cnn_lstm_model_without_news.predict(X_train_lstm_without_news)\n\ntraining_prediction_news = cnn_lstm_model_news.predict(X_train_lstm_news)\n\ntraining_prediction_without_news=training_prediction_without_news.reshape(training_prediction_without_news.shape[0], training_prediction_without_news.shape[2])\n\ntraining_prediction_news=training_prediction_news.reshape(training_prediction_news.shape[0], training_prediction_news.shape[2])\n\ny_train_pred_lstm_without_news = scaler_for_inference.inverse_transform(training_prediction_without_news)\n\ny_train_pred_lstm_news = scaler_for_inference.inverse_transform(training_prediction_news)\n\ny_train_lstm_reshaped_without_news=y_train_lstm_without_news.reshape(y_train_lstm_without_news.shape[0], y_train_lstm_without_news.shape[2])\n\ny_train_actual_lstm = scaler_for_inference.inverse_transform(y_train_lstm_reshaped_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:25:15.120479Z","iopub.execute_input":"2024-07-30T18:25:15.120939Z","iopub.status.idle":"2024-07-30T18:25:15.696876Z","shell.execute_reply.started":"2024-07-30T18:25:15.120906Z","shell.execute_reply":"2024-07-30T18:25:15.695571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_predictions_with_dates('CNN-LSTM','Training',False,training_dates,y_train_actual_lstm,y_train_pred_lstm_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:25:19.844724Z","iopub.execute_input":"2024-07-30T18:25:19.845171Z","iopub.status.idle":"2024-07-30T18:25:21.019167Z","shell.execute_reply.started":"2024-07-30T18:25:19.845138Z","shell.execute_reply":"2024-07-30T18:25:21.018003Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Training accuracy after adding the impact of news sentiment analysis","metadata":{}},{"cell_type":"code","source":"plot_predictions_with_dates('CNN-LSTM','Training',True,training_dates,y_train_actual_lstm,y_train_pred_lstm_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:25:49.899939Z","iopub.execute_input":"2024-07-30T18:25:49.900359Z","iopub.status.idle":"2024-07-30T18:25:51.085128Z","shell.execute_reply.started":"2024-07-30T18:25:49.900328Z","shell.execute_reply":"2024-07-30T18:25:51.083702Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Computing validation accuracy","metadata":{}},{"cell_type":"code","source":"validation_dates= df_for_training.index[X_train_lstm_without_news.shape[0]:X_train_lstm_without_news.shape[0] + X_val_lstm_without_news.shape[0]]\n#Make prediction\nvalidation_prediction_without_news = cnn_lstm_model_without_news.predict(X_val_lstm_without_news)\nvalidation_prediction_without_news=validation_prediction_without_news.reshape(validation_prediction_without_news.shape[0], validation_prediction_without_news.shape[2])\ny_val_pred_lstm_without_news = scaler_for_inference.inverse_transform(validation_prediction_without_news)\n\nvalidation_prediction_news = cnn_lstm_model_news.predict(X_val_lstm_news)\nvalidation_prediction_news=validation_prediction_news.reshape(validation_prediction_news.shape[0], validation_prediction_news.shape[2])\ny_val_pred_lstm_news = scaler_for_inference.inverse_transform(validation_prediction_news)\n\ny_val_actual_lstm_reshaped_without_news=y_val_lstm_without_news.reshape(y_val_lstm_without_news.shape[0], y_val_lstm_without_news.shape[2])\ny_val_actual_lstm = scaler_for_inference.inverse_transform(y_val_actual_lstm_reshaped_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:27:05.956978Z","iopub.execute_input":"2024-07-30T18:27:05.957452Z","iopub.status.idle":"2024-07-30T18:27:06.193713Z","shell.execute_reply.started":"2024-07-30T18:27:05.957417Z","shell.execute_reply":"2024-07-30T18:27:06.192400Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Validation accuracy without news","metadata":{}},{"cell_type":"code","source":"plot_predictions_with_dates('CNN-LSTM','Validation',False,validation_dates,y_val_actual_lstm,y_val_pred_lstm_without_news)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:27:13.748125Z","iopub.execute_input":"2024-07-30T18:27:13.748591Z","iopub.status.idle":"2024-07-30T18:27:14.672581Z","shell.execute_reply.started":"2024-07-30T18:27:13.748555Z","shell.execute_reply":"2024-07-30T18:27:14.671249Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Validation accuracy after adding the impact of news sentiment analysis","metadata":{}},{"cell_type":"code","source":"plot_predictions_with_dates('CNN-LSTM','Validation',True,validation_dates,y_val_actual_lstm,y_val_pred_lstm_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:27:29.028594Z","iopub.execute_input":"2024-07-30T18:27:29.029046Z","iopub.status.idle":"2024-07-30T18:27:29.951621Z","shell.execute_reply.started":"2024-07-30T18:27:29.029010Z","shell.execute_reply":"2024-07-30T18:27:29.950431Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Computing testing accuracy","metadata":{}},{"cell_type":"code","source":"testing_dates= df_for_training.index[-X_test_lstm_without_news.shape[0]:]\n#Make prediction\ntesting_prediction_without_news = cnn_lstm_model_without_news.predict(X_test_lstm_without_news)\ntesting_prediction_without_news=testing_prediction_without_news.reshape(testing_prediction_without_news.shape[0], testing_prediction_without_news.shape[2])\ny_test_pred_lstm_without_news = scaler_for_inference.inverse_transform(testing_prediction_without_news)\n\ntesting_prediction_news = cnn_lstm_model_news.predict(X_test_lstm_news)\ntesting_prediction_news=testing_prediction_news.reshape(testing_prediction_news.shape[0], testing_prediction_news.shape[2])\ny_test_pred_lstm_news = scaler_for_inference.inverse_transform(testing_prediction_news)\n\ny_test_actual_lstm_reshaped_without_news=y_test_lstm_without_news.reshape(y_test_lstm_without_news.shape[0], y_test_lstm_without_news.shape[2])\ny_test_actual_lstm = scaler_for_inference.inverse_transform(y_test_actual_lstm_reshaped_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:27:42.022756Z","iopub.execute_input":"2024-07-30T18:27:42.023208Z","iopub.status.idle":"2024-07-30T18:27:42.249116Z","shell.execute_reply.started":"2024-07-30T18:27:42.023173Z","shell.execute_reply":"2024-07-30T18:27:42.247884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### without news","metadata":{}},{"cell_type":"code","source":"plot_predictions_with_dates('CNN-LSTM','Testing',False,testing_dates,y_test_actual_lstm,y_test_pred_lstm_without_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:27:58.962854Z","iopub.execute_input":"2024-07-30T18:27:58.963328Z","iopub.status.idle":"2024-07-30T18:27:59.808881Z","shell.execute_reply.started":"2024-07-30T18:27:58.963294Z","shell.execute_reply":"2024-07-30T18:27:59.807538Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions_without_news = y_test_pred_lstm_without_news\n\ncols_without_news = [  'open',\n    'high', 'low',\n    'adj close',\n     'volume',\n    'close',]\n# Showing predictions and data\nindex_1_without_news= y_test_lstm_without_news.shape[0]\ndf_y_test_without_news = msft[cols_without_news].iloc[-index_1_without_news:]\ndf_predictions_without_news = pd.DataFrame(predictions_without_news, index=df_y_test_without_news.index, columns=[f'pred_{col}' for col in ['close']])\n\ndf_test_pred_without_news = pd.concat([df_y_test_without_news, df_predictions_without_news], axis=1)\n                         \n# Shwoing outputs\nshow(df_test_pred_without_news.tail())","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:50:52.789756Z","iopub.execute_input":"2024-07-30T15:50:52.790196Z","iopub.status.idle":"2024-07-30T15:50:52.824866Z","shell.execute_reply.started":"2024-07-30T15:50:52.790164Z","shell.execute_reply":"2024-07-30T15:50:52.823543Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Residual Analysis Plot\nplotly_residual_analysis(df_test_pred_without_news, \n                         title_add=f'CNN-LSTM with News')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:52:39.164445Z","iopub.execute_input":"2024-07-30T15:52:39.164913Z","iopub.status.idle":"2024-07-30T15:52:39.414157Z","shell.execute_reply.started":"2024-07-30T15:52:39.164853Z","shell.execute_reply":"2024-07-30T15:52:39.412836Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### with news","metadata":{}},{"cell_type":"code","source":"plot_predictions_with_dates('CNN-LSTM','Testing',True,testing_dates,y_test_actual_lstm,y_test_pred_lstm_news)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T18:28:36.204841Z","iopub.execute_input":"2024-07-30T18:28:36.205268Z","iopub.status.idle":"2024-07-30T18:28:37.038720Z","shell.execute_reply.started":"2024-07-30T18:28:36.205237Z","shell.execute_reply":"2024-07-30T18:28:37.037374Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = y_test_pred_lstm_news\n\n# Showing predictions and data\nindex_1= y_test_lstm_news.shape[0]\ndf_y_test = merged_msft_data[cols].iloc[-index_1:]\ndf_predictions = pd.DataFrame(predictions, index=df_y_test.index, columns=[f'pred_{col}' for col in ['close']])\n\ndf_test_pred = pd.concat([df_y_test, df_predictions], axis=1)\n                         \n# Shwoing outputs\nshow(df_test_pred.tail())\n\n# Residual Analysis Plot\nplotly_residual_analysis(df_test_pred, \n                         title_add=f'CNN-LSTM with News')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T15:52:21.942934Z","iopub.execute_input":"2024-07-30T15:52:21.943439Z","iopub.status.idle":"2024-07-30T15:52:22.208281Z","shell.execute_reply.started":"2024-07-30T15:52:21.943399Z","shell.execute_reply":"2024-07-30T15:52:22.207054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Comparison of results(MSFT) - Test set\n## LSTM\n\n### Without news\n- MAE for close =5.134325955821348\n- RMSE for close =6.731070041014833\n- MAPE for close =1.24589123064478\n- MSE for close=45.30730389704743\n\n\n### With news, No-shift, Sentiment Coefficient = 0.0\n- MAE for close =5.312350112780002\n- RMSE for close =6.969535167847845\n- MAPE for close =1.2886975706935615\n- MSE for close=48.574420455867894\n\n## CNN-LSTM\n\n### Without news\n- MAE for close =5.57471567339603\n- RMSE for close =6.720420373906221\n- MAPE for close =1.3327992233252433\n- MSE for close=45.16405000201383\n\n### With news, No-shift, Coefficient =0.5\n- MAE for close =4.646281583851462\n- RMSE for close =5.967641425135358\n- MAPE for close =1.1234925954303214\n\n### With news, shift = -1, Coefficient =0.5\n- MAE for close =5.187814132982384\n- RMSE for close =6.38539447245111\n- MAPE for close =1.2439233142689763\n\n### With news, No-shift, Sentiment Coefficient = 0.0\n- MAE for close =4.846748014466953\n- RMSE for close =6.355520507011205\n- MAPE for close =1.1768855705459749\n- MSE for close=40.39264091503996\n","metadata":{}}]}